name: Helm Chart Smoketest

on: [push, workflow_dispatch, pull_request]

env:
  K8S_VERSION: v1.32.3
  MICROK8S_CHANNEL: 1.32/stable

jobs:
  helm-install-smoke-test:
    permissions: {}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        config:
          - { type: "kind" }

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Install Helm
        uses: Azure/setup-helm@v4
        with:
          version: v3.18.0
      # Note: 'uses' doesn't support variable interpolation, hence the
      # k8s-specific steps below.
      # Ref: https://github.com/orgs/community/discussions/25824
      - name: Create kind cluster
        if: matrix.config.type == 'kind'
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          cluster_name: kind
          version: v0.28.0
          node_image: kindest/node:${{ env.K8S_VERSION }}
      - name: Helm install OpenBao
        run: |
          helm install openbao \
            --namespace openbao \
            --create-namespace \
            --debug \
            charts/openbao
      - name: Wait until OpenBao is in Running state
        run: |
          timeout 60s bash -c 'until [[ "$(kubectl -n openbao get pods $(kubectl -n openbao get pods -l statefulset.kubernetes.io/pod-name=openbao-0 -ojsonpath="{.items[].metadata.name}") -o jsonpath="{.status.phase}" 2>/dev/null)" == "Running" ]]; do kubectl -n openbao get pods $(kubectl get pods -n openbao -l statefulset.kubernetes.io/pod-name=openbao-0 -ojsonpath="{.items[].metadata.name}") -o jsonpath="{.status.phase}" && sleep 5; done'
      - name: Run OpenBao Agent
        run: |
          kubectl get pods -A
          openbao_pod=$(kubectl get pods -n openbao -l statefulset.kubernetes.io/pod-name=openbao-0 -ojsonpath="{.items[].metadata.name}")

          kubectl -n openbao exec $openbao_pod -c openbao -- bao operator init -key-shares=1 -key-threshold=1 -format=json > init.json
          unseal_key=$(jq -r '.unseal_keys_b64[0]' init.json)
          kubectl -n openbao exec $openbao_pod -c openbao -- bao operator unseal $unseal_key

          kubectl -n openbao port-forward svc/openbao 8200 &
          timeout 60s bash -c 'until curl -H "X-Vault-Request: true" "http://127.0.0.1:8200/v1/sys/seal-status"; do sleep 5 && kubectl get pods -A; done'

          seal_status=$(curl -s -H "X-Vault-Request: true" "http://127.0.0.1:8200/v1/sys/seal-status" | jq -r '.sealed')

          if [[ "$seal_status" == "true" ]]; then
            echo "Failed to unseal OpenBao"
            exit 1
          fi
      - name: debug
        if: failure()
        run: |
          kubectl get nodes -owide
          kubectl get pods -A -owide

          openbao_pod=$(kubectl -n openbao get pods -l statefulset.kubernetes.io/pod-name=openbao-0 -ojsonpath="{.items[].metadata.name}")
          injector_pod=$(kubectl -n openbao get pods -l app.kubernetes.io/name=openbao-agent-injector -ojsonpath="{.items[].metadata.name}")

          # Get pod metadata
          kubectl -n openbao describe pod $openbao_pod || true
          kubectl -n openbao describe pod $injector_pod || true

          # Get pod logs
          kubectl -n openbao logs -c openbao $openbao_pod || true
          kubectl -n openbao logs -c sidecar-injector $injector_pod || true
